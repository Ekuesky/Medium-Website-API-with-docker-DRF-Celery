#!/bin/bash
#Exit immediately if a command exits with a non-zero status.
set -o errexit
#The return value of a pipeline is the status of the last command to exit with a non-zero status, or zero if no command exited with a non-zero status
set -o pipefail
#Treat unset variables and parameters as an error when performing parameter expansion.
set -o nounset

# If POSTGRES_USER is empty or unset then set base_postgres_image_default_user
if [ -z "${POSTGRES_USER}" ]; then
  base_postgres_image_default_user='postgres'
  export POSTGRES_USER=${base_postgres_image_default_user}
fi

# Connection string format postgres://user:password@host:port/database
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

# Check if database is available
python << END
import sys
import time
import psycopg2

suggest_unrecoverable_after = 30
start = time.time()

while True:
    try:
        psycopg2.connect(
            dbname="${POSTGRES_DB}",
            user="${POSTGRES_USER}",
            password="${POSTGRES_PASSWORD}",
            host="${POSTGRES_HOST}",
            port="${POSTGRES_PORT}"
        )
        break
    except psycopg2.OperationalError as error:
        sys.stderr.write("Waiting for PostgreSQL to become available ...\n")
        if time.time() - start > suggest_unrecoverable_after:
            sys.stderr.write("This is taking longer than expected. The following exception may be indicative of an unrecoverable error: '{}'\n".format(error))
            sys.exit(1)
    time.sleep(1)
END

#write a message to stderr indicating that PostgreSQL is now available.
>&2 echo "PostgreSQL is available"
#replace the current shell with a new process specified by the arguments passed to the script ("$@")
#This is useful for running the main application or command after ensuring that PostgreSQL is available.
exec "$@"
